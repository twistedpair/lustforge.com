<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ci on lust.dev</title>
    <link>https://lust.dev/tags/ci/</link>
    <description>Recent content in Ci on lust.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Joseph Lust</copyright>
    <lastBuildDate>Fri, 11 Aug 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lust.dev/tags/ci/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Handling Giant Swagger Specs</title>
      <link>https://lust.dev/2017/08/11/giant-swagger-specs/</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2017/08/11/giant-swagger-specs/</guid>
      <description>

&lt;h1 id=&#34;swagger-spec-an-embarrassment-of-riches:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;Swagger Spec: An Embarrassment of Riches&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://swagger.io/specification/&#34;&gt;Swagger Spec&lt;/a&gt; is a great way to define and document API projects. Your code and documentation live and ship together, allowing for rapid documentation and development. However, you might say it&amp;rsquo;s too good.&lt;/p&gt;

&lt;p&gt;As your team and APIs using Swagger grow, so too do the challenges of wrangling that giant spec without breaking your APIs or driving your developers bonkers. Unfortinately, tools like the Swagger Validator start to break down for large, real worls specs &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:09ac5e77c9181fef9c7e835ef4126d81:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:09ac5e77c9181fef9c7e835ef4126d81:2&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Here are some lessons I learned productionizing such large specs &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:09ac5e77c9181fef9c7e835ef4126d81:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:09ac5e77c9181fef9c7e835ef4126d81:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h1 id=&#34;1-use-yaml-not-json:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;1. Use YAML, Not JSON&lt;/h1&gt;

&lt;p&gt;JSON is hard to read and easy to corrupt in large file sizes. YAML has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better readability&lt;/li&gt;
&lt;li&gt;Intellij, Atom, and SubLime &lt;a href=&#34;https://github.com/pkkid/sublime-swagger-nav/blob/master/Swagger.sublime-syntax&#34;&gt;editor support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IDE (and vim) &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8347-swagger&#34;&gt;schema auto complete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-break-up-your-spec:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;2. Break Up Your Spec&lt;/h1&gt;

&lt;p&gt;Use the &lt;a href=&#34;http://azimi.me/2015/07/16/split-swagger-into-smaller-files.html&#34;&gt;$ref includes&lt;/a&gt; functionality to compose multiple files into one spec. Break your spec into relevant sub sections (e.g. by entity type, department, etc). This will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce checkin conflicts between developers&lt;/li&gt;
&lt;li&gt;Increase readability and maintainabilty&lt;/li&gt;
&lt;li&gt;More easily isolate spec errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;3-dry-don-t-repeat-yaml:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;3. DRY: Don&amp;rsquo;t Repeat YAML&lt;/h1&gt;

&lt;p&gt;Swagger allows reuse of &lt;a href=&#34;https://swagger.io/docs/specification/data-models/enums/&#34;&gt;enums&lt;/a&gt;, so don&amp;rsquo;t repeat them in the &lt;code&gt;GET&lt;/code&gt; &amp;amp; &lt;code&gt;POST&lt;/code&gt; endpoints, and inside the data objects. &lt;code&gt;$ref&lt;/code&gt; references work for enums just like other Swagger object references.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;paths:
  /widgets:
    get:
      parameters:
      - in: query
        name: shape
        required: true
        schema:
          $ref: &#39;#/components/schemas/Shape&#39;
      responses:
        &#39;200&#39;:
          description: OK
components:
  schemas:
    Shape:
      type: string
      enum:
        - round
        - square
        - triangle
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-automate-swagger-spec-validation:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;4. Automate Swagger Spec Validation&lt;/h1&gt;

&lt;p&gt;Preemptively validate your spec, rather than wait until your API fails to start or object mapping errors throw 500&amp;rsquo;s in production.&lt;/p&gt;

&lt;p&gt;See my &lt;a href=&#34;https://lust.dev/2017/06/17/swagger-jenkins-validation/&#34;&gt;Automating Swagger Spec validation post&lt;/a&gt; on using Yelp&amp;rsquo;s &lt;a href=&#34;https://github.com/Yelp/swagger_spec_validator&#34;&gt;Swagger Spec Validator&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:09ac5e77c9181fef9c7e835ef4126d81:2&#34;&gt;Running Swagger Editor locally is slow (e.g. 6min npm install/start), consider the &lt;a href=&#34;http://halyph.com/talks/2016-swagger-slides/Run%20Swagger%20Editor%20Locally.html&#34;&gt;prebuilt Docker image&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:09ac5e77c9181fef9c7e835ef4126d81:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:09ac5e77c9181fef9c7e835ef4126d81:1&#34;&gt;I&amp;rsquo;ve wrangled 10K and 11K spec files at work. ðŸ˜¢
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:09ac5e77c9181fef9c7e835ef4126d81:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Swagger Jenkins Validation</title>
      <link>https://lust.dev/2017/06/17/swagger-jenkins-validation/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2017/06/17/swagger-jenkins-validation/</guid>
      <description>

&lt;h1 id=&#34;the-mega-spec-problem:dd97c70627f7af6687ab825eb13b9fdd&#34;&gt;The Mega Spec Problem&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://swagger.io/specification/&#34;&gt;Swagger Spec&lt;/a&gt; is a great way to define and document API projects. Your code and documentation live and ship together, allowing for rapid documentation and development. However, you might say it&amp;rsquo;s too good.&lt;/p&gt;

&lt;p&gt;When a team embraces Swagger, documenting every endpoint in great detail, the Swagger files swell to untenable dimensions&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dd97c70627f7af6687ab825eb13b9fdd:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dd97c70627f7af6687ab825eb13b9fdd:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. What worked for the &lt;a href=&#34;http://petstore.swagger.io/&#34;&gt;PetStore Spec&lt;/a&gt; no longer runs against the &lt;a href=&#34;http://editor.swagger.io/&#34;&gt;Swagger Editor webapp&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dd97c70627f7af6687ab825eb13b9fdd:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dd97c70627f7af6687ab825eb13b9fdd:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, so developers don&amp;rsquo;t bother to validate their spec edits before checkin. CI/CD auto updates your Swagger docs on deploy, auto breaking the documentation developers and customers rely upon, ultimately impeding productivity.&lt;/p&gt;

&lt;p&gt;Thus, an automatic quality gate on Swagger Specs can mitigate this path to rapid documentation corruption.&lt;/p&gt;

&lt;h1 id=&#34;automating-swagger-spec-validation:dd97c70627f7af6687ab825eb13b9fdd&#34;&gt;Automating Swagger Spec Validation&lt;/h1&gt;

&lt;p&gt;You can catch two types of spec defects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Format errors (e.g. JSON or YAML defects)&lt;/li&gt;
&lt;li&gt;Invalid spec definitions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Something as simple as running JSON through &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; will catch format errors, but we&amp;rsquo;ll focus on #2, since it&amp;rsquo;s a catch all.&lt;/p&gt;

&lt;p&gt;Yelp&amp;rsquo;s &lt;a href=&#34;https://github.com/Yelp/swagger_spec_validator&#34;&gt;Swagger Spec Validator&lt;/a&gt; is just the ticket&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dd97c70627f7af6687ab825eb13b9fdd:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dd97c70627f7af6687ab825eb13b9fdd:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
set -e
FULL_SPEC_PATH=&amp;quot;/path/to/spec.json&amp;quot; # Absolute, please

# Idempotent, local library install
virtualenv .
source bin/activate
pip install swagger-spec-validator

# Test the Spec
python -c &amp;quot;from swagger_spec_validator import validate_spec_url; validate_spec_url(&#39;file://${FULL_SPEC_PATH}&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Expect no output on success, or a trace on error.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s corrupt the &lt;a href=&#34;http://petstore.swagger.io/v2/swagger.json&#34;&gt;Pet spec file&lt;/a&gt;, but keep it in valid JSON format.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;ApiResponse_WRONG_NAME&amp;quot;: {
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;properties&amp;quot;: {
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validation outputs the following helpful message, noting the &lt;code&gt;ApiResponse&lt;/code&gt; entity references are no longer valid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  ...
  File &amp;quot;/usr/local/lib/python2.7/dist-packages/jsonschema/validators.py&amp;quot;, line 387, in resolve_from_url
    return self.resolve_fragment(document, fragment)
  File &amp;quot;/usr/local/lib/python2.7/dist-packages/jsonschema/validators.py&amp;quot;, line 421, in resolve_fragment
    &amp;quot;Unresolvable JSON pointer: %r&amp;quot; % fragment
swagger_spec_validator.common.SwaggerValidationError: Unresolvable JSON pointer: u&#39;definitions/ApiResponse&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;jenkins-wireup:dd97c70627f7af6687ab825eb13b9fdd&#34;&gt;Jenkins Wireup&lt;/h1&gt;

&lt;p&gt;Validation is great, but it will only reliably occur when fully automatic (developers are busy people!). Integration with Jenkins will ensure every Swagger Spec commit is valid, and prevent bad specs from getting into master.&lt;/p&gt;

&lt;p&gt;Simply add an &lt;code&gt;Execute Shell&lt;/code&gt; step and pass the above example (&lt;a href=&#34;https://gist.github.com/twistedpair/bc743b7e1a4b41753de6b148280410da&#34;&gt;gist link&lt;/a&gt;). The non-zero exit code on error will trigger an informative message to the offending developer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I prefer to have this as the first build step to &amp;ldquo;fail fast&amp;rdquo; on checkin, especially for long build processes, but you may prefer to do it last, so all build errors are reported.&lt;/p&gt;

&lt;p&gt;Example Jenkins Config Screen:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/swagger_validator_jenkins_config.png&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dd97c70627f7af6687ab825eb13b9fdd:1&#34;&gt;I had to wrangle an 11K spec file. Use &lt;a href=&#34;http://azimi.me/2015/07/16/split-swagger-into-smaller-files.html&#34;&gt;$ref includes&lt;/a&gt; if possible.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dd97c70627f7af6687ab825eb13b9fdd:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dd97c70627f7af6687ab825eb13b9fdd:2&#34;&gt;Running Swagger Editor locally is slow (e.g. 6min npm install/start), consider the &lt;a href=&#34;http://halyph.com/talks/2016-swagger-slides/Run%20Swagger%20Editor%20Locally.html&#34;&gt;prebuilt Docker image&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dd97c70627f7af6687ab825eb13b9fdd:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dd97c70627f7af6687ab825eb13b9fdd:3&#34;&gt;Aside from the &amp;ldquo;read the docs&amp;rdquo; link to the &lt;a href=&#34;https://swagger-spec-validator.readthedocs.io/en/latest/&#34;&gt;empty docs site&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dd97c70627f7af6687ab825eb13b9fdd:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins vs. Teamcity â€“ The Better CI Tool</title>
      <link>https://lust.dev/2014/08/21/jenkins-vs-teamcity-the-better-ci-tool/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2014/08/21/jenkins-vs-teamcity-the-better-ci-tool/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s dispel the myth about Jenkins being the gold standard continuous integration tool.Â I&amp;rsquo;m sorry, TeamCity is much better.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/tc_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h4 id=&#34;dispelling-the-jenkins-ci-myth:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;Dispelling the Jenkins CI Myth&lt;/h4&gt;

&lt;p&gt;I started using Jenkins when it was called Hudson, before the &lt;a href=&#34;http://en.wikipedia.org/wiki/Hudson_(software)#Hudson.E2.80.93Jenkins_split&#34;&gt;Oracle naming spat&lt;/a&gt;. Recently, I downloaded and installed it again and was shocked to see that little appears to have changed in so many years. What&amp;#8217;s in a UI? Not much if you&amp;#8217;re technical, but geeze, Jenkins still has the aura of an app knocked together during an all night hackathon in 1997 .&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;sÂ knock the legs from under this myth.&lt;/p&gt;

&lt;h4 id=&#34;1-jenkins-is-open-source:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;1. Jenkins is Open Source&lt;/h4&gt;

&lt;p&gt;ManyÂ Jenkins fans areÂ &lt;a href=&#34;http://en.wikipedia.org/wiki/Free_and_open-source_software&#34;&gt;FOSS&lt;/a&gt;Â fans. If there is an &lt;em&gt;open source solution&lt;/em&gt;, perhaps buggy or poorly maintained, they feel compelled to use it. Much like one can imagine &lt;a href=&#34;http://en.wikipedia.org/wiki/Richard_Stallman&#34;&gt;RMS&lt;/a&gt; foregoing a life saving treatment if the medical apparatusÂ didn&amp;#8217;t run open source code he&amp;#8217;d compiled himself.&lt;/p&gt;

&lt;p&gt;Be careful though as there are few absolute FOSS purists in practice. Inevitably, people use the best tool for the job at hand. Why does a company write code with 23 FOSS tools/languages on closed source Windows desktops? Probably &lt;em&gt;because it works for them&lt;/em&gt; and that special accounting application or antiquated, but stable, engineering software that&amp;#8217;s core to the business. Just because other options are Open Source doesn&amp;#8217;t make the whole tool chain better in practice.&lt;/p&gt;

&lt;h4 id=&#34;2-jenkins-is-free-teamcity-is-expensive:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;2. Jenkins is FREE!, TeamCity is Expensive&lt;/h4&gt;

&lt;p&gt;The Jenkins fan will note that Jenkins is free, but TeamCity costs money. Hiss! Boo!&lt;/p&gt;

&lt;p&gt;They&amp;#8217;ll not mention you can use the TeamCity CI server and three (3) build agents for FREE. And that you&amp;#8217;re only out $100/agent thereafter and $1000 for the CI server. Anyone bought Visual Studio lately? Anyone use the many $5K/seat tools out there? Anyone&amp;#8230;use Windows (Debian lover myself) ? They all cost a ton more than Jenkins. Why do you use those rather than the FOSS solution? Perhaps it&amp;#8217;s for the quality of the tool or the paid support behind it.Â Remember, many of us workÂ for profit.&lt;/p&gt;

&lt;h4 id=&#34;3-we-8217-re-an-oss-project-we-can-8217-t-afford-paid-anything:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;3. We&amp;#8217;re an OSS Project,Â We Can&amp;#8217;t AffordÂ Paid Anything&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m a huge fan of open source projects. I contribute to several. And I frequentlyÂ spar over what CI tool to use.Â &lt;em&gt;CloudBees&lt;/em&gt;,Â &lt;em&gt;BuildHive&lt;/em&gt;, &lt;em&gt;Travis&lt;/em&gt; or your own Jenkins Instance? Fatuously such groups write off TeamCityÂ since it would cost cheddar they don&amp;#8217;t have. But that would completely ignore the fact that JetBrains gives away everything for &lt;a href=&#34;http://www.jetbrains.com/teamcity/buy/choose_edition.jsp?license=OPEN_SOURCE&#34;&gt;FREE to open source projects&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;4-but-there-8217-s-a-plugin-for-that:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;4. But There&amp;#8217;s a Plugin For That!&lt;/h4&gt;

&lt;p&gt;My first production encounter with Jenkins was a comedy of errors. I had inherited a mature Jenkins installation where all quotidian tasks were either manual or cumbersome. For example, hand written jobs to do nothing but free up space from other jobs. Hacks and hacks and duct tape scripts to make the build chains we used. And throw inÂ a bi-weekly inopportune crash for good measure.&lt;/p&gt;

&lt;p&gt;I was shocked. Everything folks had wasted their time on via various scripts and manual efforts was aÂ &lt;strong&gt;standard, default, out of the box&lt;/strong&gt;Â feature in TeamCity. But stand back if you ask a Jenkins fan about this. They will counter &amp;#8220;but there&amp;#8217;s a plugin for that!&amp;#8221; Perhaps there is. A non-code reviewed plugin that does part of what you want and was last updated 19 months ago and a few major releases hence. Or, there will be three plugins to do almost the same task, and most of it might work, but check the GitHub page and recompile if you want that functionality.&lt;/p&gt;

&lt;p&gt;This is sad given that the configurations TC has out of the box could have skipped $10K in developer efforts over the last two years. But, alas, TC isn&amp;#8217;t FREE.&lt;/p&gt;

&lt;h3 id=&#34;other-bones-to-pick:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;Other Bones to Pick&lt;/h3&gt;

&lt;p&gt;Some other things thatÂ Jenkins could improve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NO SECURITY by default? Why? TC secures out of the box. Common man.&lt;/li&gt;
&lt;li&gt;No Password masking by default, you&amp;rsquo;ll need the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Mask+Passwords+Plugin&#34;&gt;masking plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;No &lt;a href=&#34;https://confluence.jetbrains.com/display/TCD9/Pre-Tested+%28Delayed%29+Commit&#34;&gt;PreTested Commit&lt;/a&gt; &amp;#8211; a TC standard that&amp;#8217;s integrated with Intellij/Eclipse &amp;#8211;Â &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Designing+pre-tested+commit&#34;&gt;Jenkins progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defaults to port &lt;code&gt;8080&lt;/code&gt; &amp;#8230; way too common a port for DEV&amp;#8217;s. Will conflict with all Java devs&lt;/li&gt;
&lt;li&gt;Startup logs are to &lt;code&gt;.err.log&lt;/code&gt;? Why?&lt;/li&gt;
&lt;li&gt;Lack of timestamps in 2 of 3 logs. You didn&amp;rsquo;t want to know when that error happened.&lt;/li&gt;
&lt;li&gt;Plugin install still triggers server restart, even if no plugins were updated/installed&lt;/li&gt;
&lt;li&gt;Coarseness of &amp;#8220;Auto-Refresh&amp;#8221; &amp;#8211; keeps reloading documentation pages! Is it 1998? XHR much?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;conclusions-and-disclaimers:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;Conclusions and Disclaimers&lt;/h4&gt;

&lt;p&gt;Give TeamCity a try. I&amp;#8217;ve been loving it for &lt;s&gt;4&lt;/s&gt; 6 years now and use it on every project. Do IÂ work for JetBrains? Nope. Then why write this? Because everyone I talk to claims Jenkins is God&amp;#8217;s gift to integration. It makes me think I&amp;rsquo;m must be taking crazy pills, so I&amp;#8217;ve written this so someone out there can make a more informed CI tooling decision.&lt;/p&gt;

&lt;h4 id=&#34;don-8217-t-take-my-word-for-it:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;Don&amp;#8217;t Take My Word For It&lt;/h4&gt;

&lt;p&gt;For all your know I&amp;rsquo;m a shill that screams at fire hydrants in the night. Read the top hits for &amp;#8220;TeamCity vs Jenkins&amp;#8221; and you&amp;#8217;ll discover the same thesis.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.excella.com/blog/teamcity-vs-jenkins-better-continuous-integration-server/&#34;&gt;TeamCity vs Jenkins: Which is the Better Continuous Integration Server for .NET Development?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chrisdown.name/2013/07/11/moving-to-teamcity-from-jenkins.html&#34;&gt;Moving to TeamCity from Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://luolong.blogspot.com/2011/02/comparing-jenkins-vs-teamcity-part-2.html&#34;&gt;Comparing Jenkins vs TeamCity &amp;#8211; Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pivotallabs.com/teamcity-is-pretty-cool-you-should-totally-check-it-out/&#34;&gt;How-To: Continuous Integration with TeamCity and Behat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pivotallabs.com/teamcity-is-pretty-cool-you-should-totally-check-it-out/&#34;&gt;TeamCity is pretty cool, you should totally check it out&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>