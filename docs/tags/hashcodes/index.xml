<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hashcodes on lust.dev</title>
    <link>https://lust.dev/tags/hashcodes/</link>
    <description>Recent content in Hashcodes on lust.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Joseph Lust</copyright>
    <lastBuildDate>Sat, 08 Oct 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lust.dev/tags/hashcodes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Password Hasher : Every Hash Under the Sun</title>
      <link>https://lust.dev/2011/10/08/password-hasher-every-hash-under-the-sun/</link>
      <pubDate>Sat, 08 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2011/10/08/password-hasher-every-hash-under-the-sun/</guid>
      <description>

&lt;style&gt;
label.hashLabel {
            width: 130px;
            display: inline-block;
}
&lt;/style&gt;

&lt;script&gt;
   function getHashes() {
        jQuery(&#39;#hashResults&#39;).html(&#34;Loading...&#34;);
        jQuery(&#39;#hashResults&#39;).load( &#39;https://lustforge.com/Backends/ultraHash_backend.php?str=&#39;+encodeURI(jQuery(&#39;#hashStr&#39;).val()));
   }
   function clearHashes() {
        jQuery(&#39;#hashStr&#39;).val(&#39;&#39;);
        jQuery(&#39;#hashResults&#39;).html(&#39;&#39;);
   }
&lt;/script&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/cornedBeefHash.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Big helping of hash&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I got tired of having to find a place to run all my hashes frequently for random projects, so I through this together in a few lines. I hope it helps folks.&lt;/p&gt;

&lt;p&gt;The following hashes are provided: &lt;code&gt;md2&lt;/code&gt;, &lt;code&gt;md4&lt;/code&gt;, &lt;code&gt;md5&lt;/code&gt;, &lt;code&gt;sha1&lt;/code&gt;, &lt;code&gt;sha224&lt;/code&gt;, &lt;code&gt;sha256&lt;/code&gt;, &lt;code&gt;sha384&lt;/code&gt;, &lt;code&gt;sha512&lt;/code&gt;, &lt;code&gt;ripemd128&lt;/code&gt;, &lt;code&gt;ripemd160&lt;/code&gt;, &lt;code&gt;ripemd256&lt;/code&gt;, &lt;code&gt;ripemd320&lt;/code&gt;, &lt;code&gt;whirlpool&lt;/code&gt;, &lt;code&gt;tiger128,3&lt;/code&gt;, &lt;code&gt;tiger160,3&lt;/code&gt;, &lt;code&gt;tiger192,3&lt;/code&gt;, &lt;code&gt;tiger128,4&lt;/code&gt;, &lt;code&gt;tiger160,4&lt;/code&gt;, &lt;code&gt;tiger192,4&lt;/code&gt;, &lt;code&gt;snefru&lt;/code&gt;, &lt;code&gt;snefru256&lt;/code&gt;, &lt;code&gt;gost&lt;/code&gt;, &lt;code&gt;adler32&lt;/code&gt;, &lt;code&gt;crc32&lt;/code&gt;, &lt;code&gt;crc32b&lt;/code&gt;, &lt;code&gt;salsa10&lt;/code&gt;, &lt;code&gt;salsa20&lt;/code&gt;, &lt;code&gt;haval128,3&lt;/code&gt;, &lt;code&gt;haval160,3&lt;/code&gt;, &lt;code&gt;haval192,3&lt;/code&gt;, &lt;code&gt;haval224,3&lt;/code&gt;, &lt;code&gt;haval256,3&lt;/code&gt;, &lt;code&gt;haval128,4&lt;/code&gt;, &lt;code&gt;haval160,4, haval192,4, haval224,4, haval256,4, haval128,5, haval160,5, haval192,5, haval224,5, haval256,5&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#39;hashPrompt&#39;&gt;
  Hash this: &lt;input id=&#39;hashStr&#39; type=&#34;text&#34; style=&#34;width:100%;&#34; name=&#34;str&#34; value=&#34;&#34; /&gt;&lt;br /&gt; &lt;button onclick=&#34;getHashes();&#34;&gt;Hash it&lt;/button&gt;&lt;button id=&#39;clear&#39; onclick=&#34;clearHashes();&#34;&gt;Clear&lt;/button&gt;
&lt;/div&gt;

&lt;table id=&#34;hashResults&#34;&gt;
&lt;/table&gt;

&lt;h3 id=&#34;the-script:6094c75f3b81f4fa53c3b0e6288b9238&#34;&gt;The Script&lt;/h3&gt;

&lt;p&gt;For reference, this is the ugly piece of PHP that makes the magic happen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$str = urldecode( $_REQUEST[&#39;str&#39;] );

foreach( hash_algos() as $n=&amp;gt;$hash ) {
    $hashName = strtoupper($hash);
    $theHash = ($str) ? hash($hash,$str) : &amp;quot;&amp;quot;;
    $oddEven = ($n%2) ? &#39;odd&#39;:&#39;even&#39;;
    echo &amp;quot;&amp;lt;tr class=&#39;$oddEven&#39;&amp;gt;&amp;lt;td&amp;gt;&amp;lt;label 
class=&#39;hashLabel&#39;&amp;gt;$hashName:&amp;lt;/label&amp;gt;&amp;lt;input type=&#39;text&#39; 
style=&#39;width:500px;&#39; value=&#39;$theHash&#39; /&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cracking WordPress Hashcash</title>
      <link>https://lust.dev/2010/07/17/cracking-wordpress-hashcash/</link>
      <pubDate>Sat, 17 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2010/07/17/cracking-wordpress-hashcash/</guid>
      <description>

&lt;p&gt;As many know, &lt;a href=&#34;https://wordpress.org/plugins/hashcash/&#34;&gt;WordPress Hashcash&lt;/a&gt; is not a &lt;a href=&#34;http://en.wikipedia.org/wiki/Hashcash&#34;&gt;hashcash&lt;/a&gt; at all. This is more than merely semantics. A true hashcash would provide protections to blogs from spam bots, but WPHC does no such thing. Rather WPHC merely projects an aura of protection that even the most novitiate script kiddie can crack.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&#34;http://wordpress-plugins.feifei.us/hashcash/&#34; target=&#34;_blank&#34;&gt;authors of WPHC&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;WP Hashcash is an antispam plugin that eradicates comment spam on WordPress blogs.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not really, let me explain why.&lt;/p&gt;

&lt;p&gt;WPHC inserts javascript into your blog&amp;#8217;s webpage. By default, a spam bot will not load and run this code because it is only run by web browsers. However, the spam bot makers are no Luddites and can easily pull this javascript code from the page, run it, and return the hashcash code.&lt;/p&gt;

&lt;p&gt;To prove this fact, see the below PHP class UnHashcash which takes the HTML of a blog post, processes the javascript, and returns the purportedly secure hashcash code.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/twistedpair/20b391f1e954e7a1aac9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I present this code as a clear example of why people should not assume that WPHC will protect their blogs from spam. The simplest solution is to require member sign up or use captchas and Akismet.&lt;/p&gt;

&lt;p&gt;Oh, and I know this blog is running WPHC. I&amp;#8217;m looking forward to some spam bots. Spam Ahoy!&lt;/p&gt;

&lt;h2 id=&#34;update-20-feb-2016:63bd52f0c6902ad4995f317a00b6a19d&#34;&gt;Update: 20 Feb 2016&lt;/h2&gt;

&lt;p&gt;Blog has moved to static Hugo, so sorry, no longer running WPHC.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>