<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Continuous Integration on lust.dev</title>
    <link>https://lust.dev/tags/continuous-integration/</link>
    <description>Recent content in Continuous Integration on lust.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Joseph Lust</copyright>
    <lastBuildDate>Sat, 28 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lust.dev/tags/continuous-integration/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Don’t use Git to Deploy Code</title>
      <link>https://lust.dev/2015/02/28/dont-use-git-to-deploy-code/</link>
      <pubDate>Sat, 28 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2015/02/28/dont-use-git-to-deploy-code/</guid>
      <description>

&lt;!--Not again GitHub! Save us Muscular Failure Unicorn!--&gt;

&lt;p&gt;Just don&amp;#8217;t. If you can&amp;#8217;t reason why, please stop developing code critical to your business.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/github_down.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;when-it-works-it-works:9caea413e602ba8b2ea3301e2cd987db&#34;&gt;When it works, it works&lt;/h3&gt;

&lt;p&gt;Git is great. &lt;em&gt;Push&lt;/em&gt; here, &lt;em&gt;pull&lt;/em&gt; there. It works so well that you might be fatuously convinced it&amp;#8217;s the perfect tool to deploy production code. Even worse, it might appear to work well at this task, further reinforcing your choice  However, the Achilles Heel of any DVCS is your origin provider. Let&amp;#8217;s say that &lt;a href=&#34;https://twitter.com/bitbucket/status/460418803805855745&#34;&gt;BitBucket&lt;/a&gt; has &lt;a href=&#34;https://twitter.com/search?q=%40BitBucket%20down&amp;amp;src=typd&#34;&gt;borked&lt;/a&gt; their database for the 4th time this month or GitHub is suffering yet another DDNS attack. Then we see &lt;a href=&#34;http://jorgennilsson.com/article/there-is-always-a-drawback-bitbucket-major-outage&#34;&gt;posts&lt;/a&gt; &lt;a href=&#34;https://bitbucket.org/alixandru/bitbucket-sync/issue/19/post-hook-deployment-stopped-working&#34;&gt;opining&lt;/a&gt; about failed Git based app deployments.&lt;/p&gt;

&lt;h3 id=&#34;when-shit-goes-wrong-things-get-complicated:9caea413e602ba8b2ea3301e2cd987db&#34;&gt;When shit goes wrong, things get complicated&lt;/h3&gt;

&lt;p&gt;Now shit&amp;#8217;s gone wrong. No worries, there must be a more complicated way to solve what appeared to be a simple workflow. We&amp;#8217;ve got all these Unix cli tools and can bodger something together. I think I can just scp the files over. Wait, better rsync them, I&amp;#8217;m not sure exactly which ones changed. Arr&amp;#8230; so many flags, do I want to compare file checksums or timestamps? Maybe I&amp;#8217;ll tarball up everything and push it over to the servers. What was the command string again &lt;a href=&#34;https://xkcd.com/1168/&#34;&gt;to untar&lt;/a&gt; and ungzip? Crap, I included my file permissions and they don&amp;#8217;t work on the server. Huh, how was I supposed to know the code stored running PID&amp;#8217;s in various files sprinkled throughout the source? WTF, someone tweaked some of those settings files server side and I just overwrote them. Fuck&amp;#8230; I made backup of that server directory before I started, right? Alright, Hail Mary time, I&amp;#8217;ll just export my remote repo and import it as a different origin on the server. How the hell do I do that?&lt;/p&gt;

&lt;h3 id=&#34;shit-goes-wrong-at-the-wrong-time:9caea413e602ba8b2ea3301e2cd987db&#34;&gt;Shit goes wrong at the wrong time&lt;/h3&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/bitbucket_down.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;No knowledge of HTTP codes necessary at BitBucket (500 is bad).&lt;/p&gt;

&lt;p&gt;The above might be a fun exercise on the QA server when it&amp;#8217;s 3pm and everyone&amp;#8217;s in the office on a slow Tuesday, but that&amp;#8217;s not how these things unfold. Nope. What will really happen is there is a hotfix that needs to go out and got assigned to the intern, because he needs the experience, you know. And because he&amp;#8217;s the only guy on call during Thanksgiving since everyone else is away on vacation. But now he&amp;#8217;s riding the wheels off this Rube Goldberg machine, getting both hands stuck in the tar pit and only working himself deeper as he borks the entire production setup and your site is down for the count at 2am on Black Friday.&lt;/p&gt;

&lt;h3 id=&#34;special-snowflake-servers:9caea413e602ba8b2ea3301e2cd987db&#34;&gt;Special snowflake servers&lt;/h3&gt;

&lt;p&gt;Git checkouts to update code encourage &lt;a href=&#34;http://martinfowler.com/bliki/SnowflakeServer.html&#34;&gt;Special Snowflake servers&lt;/a&gt;. Each server is a unique, artisan crafted piece of Unix art. Like literal snowflakes, no two are the same. No one really understands how it all works and the little documentation that exists was last updated in the Bush administration.  Running &lt;code&gt;git status&lt;/code&gt; shows lots of little file changes to get things just right on each machine, some versioned, some not, so no one has had the balls to &lt;code&gt;git reset --hard&lt;/code&gt; for years now.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/fail_bitbucket.png&#34; /&gt;
    
    
&lt;/figure&gt;

Satanic BitBucket Logo of Doom&lt;/p&gt;

&lt;h3 id=&#34;the-better-deterministic-way:9caea413e602ba8b2ea3301e2cd987db&#34;&gt;The better, deterministic way&lt;/h3&gt;

&lt;p&gt;Deploy your code as a self contained distributable. In Java we&amp;#8217;ve got &lt;a href=&#34;http://en.wikipedia.org/wiki/WAR_%28file_format%29&#34;&gt;War&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/EAR_%28file_format%29&#34;&gt;Ear&lt;/a&gt; files. In Play Framework we&amp;#8217;ve got binary distributables you unzip and run. ASP.Net can be &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dd465323%28v=vs.110%29.aspx&#34; target=&#34;_blank&#34;&gt;packaged&lt;/a&gt;, just like &lt;a href=&#34;https://www.ruby-toolbox.com/categories/packaging_to_executables&#34; target=&#34;_blank&#34;&gt;Ruby&lt;/a&gt; and many others. They&amp;#8217;re like &lt;a href=&#34;http://en.wikipedia.org/wiki/Meal,_Ready-to-Eat&#34; target=&#34;_blank&#34;&gt;MRE&lt;/a&gt;&amp;#8216;s, but you just unzip them. No need to add water. You don&amp;#8217;t care what version of Scala is running on the server host, whether the proper DLL is loaded, or if you&amp;#8217;re on the proper Ruby release. It Just Works™. When shit&amp;#8217;s broken and your customers are screaming on Twitter, you want your code to Just Work.&lt;/p&gt;

&lt;h3 id=&#34;distributing-the-distributables:9caea413e602ba8b2ea3301e2cd987db&#34;&gt;Distributing the distributables&lt;/h3&gt;

&lt;p&gt;&amp;#8220;The distributable is huge!&amp;#8221; you warn. Sure, 78MB won&amp;#8217;t fit on a floppy, but we&amp;#8217;ve got 10G server interconnects. I think we&amp;#8217;ll be OK. &amp;#8220;But where will we server those from,&amp;#8221; you say, still unconvinced. How about &lt;a href=&#34;http://aws.amazon.com/s3/&#34; target=&#34;_blank&#34;&gt;AWS S3&lt;/a&gt;, with 11 nines durability (99.999999999). Or, you can setup your own &lt;a href=&#34;http://docs.openstack.org/developer/swift/&#34; target=&#34;_blank&#34;&gt;Open Stack Swift&lt;/a&gt; object store if you&amp;#8217;d prefer.&lt;/p&gt;

&lt;p&gt;The process is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Built and unit/integration test a commit on CI&lt;/li&gt;
&lt;li&gt;Push passing build distributable to S3&lt;/li&gt;
&lt;li&gt;Your deploy script on server downloads from S3 and restarts the app&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If S3 is down (better take some real MRE&amp;#8217;s into the basement, the end is near), you either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the distributable artifact from CI and scp it to the server&lt;/li&gt;
&lt;li&gt;If CI and S3 are down, build locally and scp it to the server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The point is to have a canonical way to turn an explicit state of source (i.e. checkout hash) into an binary that will consistently run as desired where you deploy it. No chasing thousands of source files. No trying to compile all the source on your workstation, and on your CI, and on your front end servers. Fight entropy. Choose determinism.&lt;/p&gt;

&lt;h3 id=&#34;other-reasons:9caea413e602ba8b2ea3301e2cd987db&#34;&gt;Other Reasons&lt;/h3&gt;

&lt;h4 id=&#34;file-contention:9caea413e602ba8b2ea3301e2cd987db&#34;&gt;File contention&lt;/h4&gt;

&lt;p&gt;Do you work in one of those _scripting_ languages? Say PHP, Ruby, or Python. Ever had your SCM fail to update files because of open file pointers to running or zombie threads? Prepare yourself for some possible non-deterministic behavior when you deploy these apps via Git. It&amp;#8217;ll be best to add some &lt;em&gt;pgrep&lt;/em&gt; steps to run around and kill off possibly offensive threads, but then you&amp;#8217;ve got to be asking yourself, &amp;#8220;what life choices did I make that led me to run around killing myriad threads on each deploy?&amp;#8221;&lt;/p&gt;

&lt;h4 id=&#34;scm-8217-s-worse-than-git:9caea413e602ba8b2ea3301e2cd987db&#34;&gt;SCM&amp;#8217;s worse than git&lt;/h4&gt;

&lt;p&gt;Git works pretty well, but what if you&amp;#8217;re deploying with another SCM like &lt;strong&gt;SVN&lt;/strong&gt;. God help you, friend. The change databases that back your local SVN checkout can get corrupted in &lt;a href=&#34;https://stackoverflow.com/questions/335987/how-can-a-svn-repository-become-corrupt&#34;&gt;wondrous ways&lt;/a&gt;. The net result can be that SVN says you&amp;#8217;re on revision X, and &lt;code&gt;svn status&lt;/code&gt; shows no files are changed locally. When you call &lt;code&gt;svn update&lt;/code&gt; or checkout the target revision, you&amp;#8217;re told you&amp;#8217;re already up to date&amp;#8230; but &lt;strong&gt;you&amp;#8217;re not&lt;/strong&gt;.&lt;strong&gt; &lt;/strong&gt;This is true FML territory. If your SCM cannot reliably track changes, it should be cast to special circle in hell. Sadly, I&amp;#8217;ve personally seen this happen three times in a single year. God help you, friend.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins vs. Teamcity – The Better CI Tool</title>
      <link>https://lust.dev/2014/08/21/jenkins-vs-teamcity-the-better-ci-tool/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2014/08/21/jenkins-vs-teamcity-the-better-ci-tool/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s dispel the myth about Jenkins being the gold standard continuous integration tool. I&amp;rsquo;m sorry, TeamCity is much better.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/tc_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h4 id=&#34;dispelling-the-jenkins-ci-myth:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;Dispelling the Jenkins CI Myth&lt;/h4&gt;

&lt;p&gt;I started using Jenkins when it was called Hudson, before the &lt;a href=&#34;http://en.wikipedia.org/wiki/Hudson_(software)#Hudson.E2.80.93Jenkins_split&#34;&gt;Oracle naming spat&lt;/a&gt;. Recently, I downloaded and installed it again and was shocked to see that little appears to have changed in so many years. What&amp;#8217;s in a UI? Not much if you&amp;#8217;re technical, but geeze, Jenkins still has the aura of an app knocked together during an all night hackathon in 1997 .&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s knock the legs from under this myth.&lt;/p&gt;

&lt;h4 id=&#34;1-jenkins-is-open-source:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;1. Jenkins is Open Source&lt;/h4&gt;

&lt;p&gt;Many Jenkins fans are &lt;a href=&#34;http://en.wikipedia.org/wiki/Free_and_open-source_software&#34;&gt;FOSS&lt;/a&gt; fans. If there is an &lt;em&gt;open source solution&lt;/em&gt;, perhaps buggy or poorly maintained, they feel compelled to use it. Much like one can imagine &lt;a href=&#34;http://en.wikipedia.org/wiki/Richard_Stallman&#34;&gt;RMS&lt;/a&gt; foregoing a life saving treatment if the medical apparatus didn&amp;#8217;t run open source code he&amp;#8217;d compiled himself.&lt;/p&gt;

&lt;p&gt;Be careful though as there are few absolute FOSS purists in practice. Inevitably, people use the best tool for the job at hand. Why does a company write code with 23 FOSS tools/languages on closed source Windows desktops? Probably &lt;em&gt;because it works for them&lt;/em&gt; and that special accounting application or antiquated, but stable, engineering software that&amp;#8217;s core to the business. Just because other options are Open Source doesn&amp;#8217;t make the whole tool chain better in practice.&lt;/p&gt;

&lt;h4 id=&#34;2-jenkins-is-free-teamcity-is-expensive:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;2. Jenkins is FREE!, TeamCity is Expensive&lt;/h4&gt;

&lt;p&gt;The Jenkins fan will note that Jenkins is free, but TeamCity costs money. Hiss! Boo!&lt;/p&gt;

&lt;p&gt;They&amp;#8217;ll not mention you can use the TeamCity CI server and three (3) build agents for FREE. And that you&amp;#8217;re only out $100/agent thereafter and $1000 for the CI server. Anyone bought Visual Studio lately? Anyone use the many $5K/seat tools out there? Anyone&amp;#8230;use Windows (Debian lover myself) ? They all cost a ton more than Jenkins. Why do you use those rather than the FOSS solution? Perhaps it&amp;#8217;s for the quality of the tool or the paid support behind it. Remember, many of us work for profit.&lt;/p&gt;

&lt;h4 id=&#34;3-we-8217-re-an-oss-project-we-can-8217-t-afford-paid-anything:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;3. We&amp;#8217;re an OSS Project, We Can&amp;#8217;t Afford Paid Anything&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m a huge fan of open source projects. I contribute to several. And I frequently spar over what CI tool to use. &lt;em&gt;CloudBees&lt;/em&gt;, &lt;em&gt;BuildHive&lt;/em&gt;, &lt;em&gt;Travis&lt;/em&gt; or your own Jenkins Instance? Fatuously such groups write off TeamCity since it would cost cheddar they don&amp;#8217;t have. But that would completely ignore the fact that JetBrains gives away everything for &lt;a href=&#34;http://www.jetbrains.com/teamcity/buy/choose_edition.jsp?license=OPEN_SOURCE&#34;&gt;FREE to open source projects&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;4-but-there-8217-s-a-plugin-for-that:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;4. But There&amp;#8217;s a Plugin For That!&lt;/h4&gt;

&lt;p&gt;My first production encounter with Jenkins was a comedy of errors. I had inherited a mature Jenkins installation where all quotidian tasks were either manual or cumbersome. For example, hand written jobs to do nothing but free up space from other jobs. Hacks and hacks and duct tape scripts to make the build chains we used. And throw in a bi-weekly inopportune crash for good measure.&lt;/p&gt;

&lt;p&gt;I was shocked. Everything folks had wasted their time on via various scripts and manual efforts was a &lt;strong&gt;standard, default, out of the box&lt;/strong&gt; feature in TeamCity. But stand back if you ask a Jenkins fan about this. They will counter &amp;#8220;but there&amp;#8217;s a plugin for that!&amp;#8221; Perhaps there is. A non-code reviewed plugin that does part of what you want and was last updated 19 months ago and a few major releases hence. Or, there will be three plugins to do almost the same task, and most of it might work, but check the GitHub page and recompile if you want that functionality.&lt;/p&gt;

&lt;p&gt;This is sad given that the configurations TC has out of the box could have skipped $10K in developer efforts over the last two years. But, alas, TC isn&amp;#8217;t FREE.&lt;/p&gt;

&lt;h3 id=&#34;other-bones-to-pick:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;Other Bones to Pick&lt;/h3&gt;

&lt;p&gt;Some other things that Jenkins could improve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NO SECURITY by default? Why? TC secures out of the box. Common man.&lt;/li&gt;
&lt;li&gt;No Password masking by default, you&amp;rsquo;ll need the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Mask+Passwords+Plugin&#34;&gt;masking plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;No &lt;a href=&#34;https://confluence.jetbrains.com/display/TCD9/Pre-Tested+%28Delayed%29+Commit&#34;&gt;PreTested Commit&lt;/a&gt; &amp;#8211; a TC standard that&amp;#8217;s integrated with Intellij/Eclipse &amp;#8211; &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Designing+pre-tested+commit&#34;&gt;Jenkins progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defaults to port &lt;code&gt;8080&lt;/code&gt; &amp;#8230; way too common a port for DEV&amp;#8217;s. Will conflict with all Java devs&lt;/li&gt;
&lt;li&gt;Startup logs are to &lt;code&gt;.err.log&lt;/code&gt;? Why?&lt;/li&gt;
&lt;li&gt;Lack of timestamps in 2 of 3 logs. You didn&amp;rsquo;t want to know when that error happened.&lt;/li&gt;
&lt;li&gt;Plugin install still triggers server restart, even if no plugins were updated/installed&lt;/li&gt;
&lt;li&gt;Coarseness of &amp;#8220;Auto-Refresh&amp;#8221; &amp;#8211; keeps reloading documentation pages! Is it 1998? XHR much?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;conclusions-and-disclaimers:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;Conclusions and Disclaimers&lt;/h4&gt;

&lt;p&gt;Give TeamCity a try. I&amp;#8217;ve been loving it for &lt;s&gt;4&lt;/s&gt; 6 years now and use it on every project. Do I work for JetBrains? Nope. Then why write this? Because everyone I talk to claims Jenkins is God&amp;#8217;s gift to integration. It makes me think I&amp;rsquo;m must be taking crazy pills, so I&amp;#8217;ve written this so someone out there can make a more informed CI tooling decision.&lt;/p&gt;

&lt;h4 id=&#34;don-8217-t-take-my-word-for-it:b072f3c348b98dc8a1c6df53031f12e8&#34;&gt;Don&amp;#8217;t Take My Word For It&lt;/h4&gt;

&lt;p&gt;For all your know I&amp;rsquo;m a shill that screams at fire hydrants in the night. Read the top hits for &amp;#8220;TeamCity vs Jenkins&amp;#8221; and you&amp;#8217;ll discover the same thesis.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.excella.com/blog/teamcity-vs-jenkins-better-continuous-integration-server/&#34;&gt;TeamCity vs Jenkins: Which is the Better Continuous Integration Server for .NET Development?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chrisdown.name/2013/07/11/moving-to-teamcity-from-jenkins.html&#34;&gt;Moving to TeamCity from Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://luolong.blogspot.com/2011/02/comparing-jenkins-vs-teamcity-part-2.html&#34;&gt;Comparing Jenkins vs TeamCity &amp;#8211; Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pivotallabs.com/teamcity-is-pretty-cool-you-should-totally-check-it-out/&#34;&gt;How-To: Continuous Integration with TeamCity and Behat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pivotallabs.com/teamcity-is-pretty-cool-you-should-totally-check-it-out/&#34;&gt;TeamCity is pretty cool, you should totally check it out&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>