<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swagger on lust.dev</title>
    <link>https://lust.dev/tags/swagger/</link>
    <description>Recent content in Swagger on lust.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Joseph Lust</copyright>
    <lastBuildDate>Fri, 11 Aug 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lust.dev/tags/swagger/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Handling Giant Swagger Specs</title>
      <link>https://lust.dev/2017/08/11/giant-swagger-specs/</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2017/08/11/giant-swagger-specs/</guid>
      <description>

&lt;h1 id=&#34;swagger-spec-an-embarrassment-of-riches:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;Swagger Spec: An Embarrassment of Riches&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://swagger.io/specification/&#34;&gt;Swagger Spec&lt;/a&gt; is a great way to define and document API projects. Your code and documentation live and ship together, allowing for rapid documentation and development. However, you might say it&amp;rsquo;s too good.&lt;/p&gt;

&lt;p&gt;As your team and APIs using Swagger grow, so too do the challenges of wrangling that giant spec without breaking your APIs or driving your developers bonkers. Unfortinately, tools like the Swagger Validator start to break down for large, real worls specs &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:09ac5e77c9181fef9c7e835ef4126d81:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:09ac5e77c9181fef9c7e835ef4126d81:2&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Here are some lessons I learned productionizing such large specs &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:09ac5e77c9181fef9c7e835ef4126d81:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:09ac5e77c9181fef9c7e835ef4126d81:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h1 id=&#34;1-use-yaml-not-json:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;1. Use YAML, Not JSON&lt;/h1&gt;

&lt;p&gt;JSON is hard to read and easy to corrupt in large file sizes. YAML has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better readability&lt;/li&gt;
&lt;li&gt;Intellij, Atom, and SubLime &lt;a href=&#34;https://github.com/pkkid/sublime-swagger-nav/blob/master/Swagger.sublime-syntax&#34;&gt;editor support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IDE (and vim) &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8347-swagger&#34;&gt;schema auto complete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-break-up-your-spec:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;2. Break Up Your Spec&lt;/h1&gt;

&lt;p&gt;Use the &lt;a href=&#34;http://azimi.me/2015/07/16/split-swagger-into-smaller-files.html&#34;&gt;$ref includes&lt;/a&gt; functionality to compose multiple files into one spec. Break your spec into relevant sub sections (e.g. by entity type, department, etc). This will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce checkin conflicts between developers&lt;/li&gt;
&lt;li&gt;Increase readability and maintainabilty&lt;/li&gt;
&lt;li&gt;More easily isolate spec errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;3-dry-don-t-repeat-yaml:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;3. DRY: Don&amp;rsquo;t Repeat YAML&lt;/h1&gt;

&lt;p&gt;Swagger allows reuse of &lt;a href=&#34;https://swagger.io/docs/specification/data-models/enums/&#34;&gt;enums&lt;/a&gt;, so don&amp;rsquo;t repeat them in the &lt;code&gt;GET&lt;/code&gt; &amp;amp; &lt;code&gt;POST&lt;/code&gt; endpoints, and inside the data objects. &lt;code&gt;$ref&lt;/code&gt; references work for enums just like other Swagger object references.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;paths:
  /widgets:
    get:
      parameters:
      - in: query
        name: shape
        required: true
        schema:
          $ref: &#39;#/components/schemas/Shape&#39;
      responses:
        &#39;200&#39;:
          description: OK
components:
  schemas:
    Shape:
      type: string
      enum:
        - round
        - square
        - triangle
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-automate-swagger-spec-validation:09ac5e77c9181fef9c7e835ef4126d81&#34;&gt;4. Automate Swagger Spec Validation&lt;/h1&gt;

&lt;p&gt;Preemptively validate your spec, rather than wait until your API fails to start or object mapping errors throw 500&amp;rsquo;s in production.&lt;/p&gt;

&lt;p&gt;See my &lt;a href=&#34;https://lust.dev/2017/06/17/swagger-jenkins-validation/&#34;&gt;Automating Swagger Spec validation post&lt;/a&gt; on using Yelp&amp;rsquo;s &lt;a href=&#34;https://github.com/Yelp/swagger_spec_validator&#34;&gt;Swagger Spec Validator&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:09ac5e77c9181fef9c7e835ef4126d81:2&#34;&gt;Running Swagger Editor locally is slow (e.g. 6min npm install/start), consider the &lt;a href=&#34;http://halyph.com/talks/2016-swagger-slides/Run%20Swagger%20Editor%20Locally.html&#34;&gt;prebuilt Docker image&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:09ac5e77c9181fef9c7e835ef4126d81:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:09ac5e77c9181fef9c7e835ef4126d81:1&#34;&gt;I&amp;rsquo;ve wrangled 10K and 11K spec files at work. ðŸ˜¢
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:09ac5e77c9181fef9c7e835ef4126d81:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Swagger Jenkins Validation</title>
      <link>https://lust.dev/2017/06/17/swagger-jenkins-validation/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2017/06/17/swagger-jenkins-validation/</guid>
      <description>

&lt;h1 id=&#34;the-mega-spec-problem:dd97c70627f7af6687ab825eb13b9fdd&#34;&gt;The Mega Spec Problem&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://swagger.io/specification/&#34;&gt;Swagger Spec&lt;/a&gt; is a great way to define and document API projects. Your code and documentation live and ship together, allowing for rapid documentation and development. However, you might say it&amp;rsquo;s too good.&lt;/p&gt;

&lt;p&gt;When a team embraces Swagger, documenting every endpoint in great detail, the Swagger files swell to untenable dimensions&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dd97c70627f7af6687ab825eb13b9fdd:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dd97c70627f7af6687ab825eb13b9fdd:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. What worked for the &lt;a href=&#34;http://petstore.swagger.io/&#34;&gt;PetStore Spec&lt;/a&gt; no longer runs against the &lt;a href=&#34;http://editor.swagger.io/&#34;&gt;Swagger Editor webapp&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dd97c70627f7af6687ab825eb13b9fdd:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dd97c70627f7af6687ab825eb13b9fdd:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, so developers don&amp;rsquo;t bother to validate their spec edits before checkin. CI/CD auto updates your Swagger docs on deploy, auto breaking the documentation developers and customers rely upon, ultimately impeding productivity.&lt;/p&gt;

&lt;p&gt;Thus, an automatic quality gate on Swagger Specs can mitigate this path to rapid documentation corruption.&lt;/p&gt;

&lt;h1 id=&#34;automating-swagger-spec-validation:dd97c70627f7af6687ab825eb13b9fdd&#34;&gt;Automating Swagger Spec Validation&lt;/h1&gt;

&lt;p&gt;You can catch two types of spec defects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Format errors (e.g. JSON or YAML defects)&lt;/li&gt;
&lt;li&gt;Invalid spec definitions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Something as simple as running JSON through &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; will catch format errors, but we&amp;rsquo;ll focus on #2, since it&amp;rsquo;s a catch all.&lt;/p&gt;

&lt;p&gt;Yelp&amp;rsquo;s &lt;a href=&#34;https://github.com/Yelp/swagger_spec_validator&#34;&gt;Swagger Spec Validator&lt;/a&gt; is just the ticket&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dd97c70627f7af6687ab825eb13b9fdd:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dd97c70627f7af6687ab825eb13b9fdd:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
set -e
FULL_SPEC_PATH=&amp;quot;/path/to/spec.json&amp;quot; # Absolute, please

# Idempotent, local library install
virtualenv .
source bin/activate
pip install swagger-spec-validator

# Test the Spec
python -c &amp;quot;from swagger_spec_validator import validate_spec_url; validate_spec_url(&#39;file://${FULL_SPEC_PATH}&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Expect no output on success, or a trace on error.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s corrupt the &lt;a href=&#34;http://petstore.swagger.io/v2/swagger.json&#34;&gt;Pet spec file&lt;/a&gt;, but keep it in valid JSON format.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;ApiResponse_WRONG_NAME&amp;quot;: {
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;properties&amp;quot;: {
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validation outputs the following helpful message, noting the &lt;code&gt;ApiResponse&lt;/code&gt; entity references are no longer valid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  ...
  File &amp;quot;/usr/local/lib/python2.7/dist-packages/jsonschema/validators.py&amp;quot;, line 387, in resolve_from_url
    return self.resolve_fragment(document, fragment)
  File &amp;quot;/usr/local/lib/python2.7/dist-packages/jsonschema/validators.py&amp;quot;, line 421, in resolve_fragment
    &amp;quot;Unresolvable JSON pointer: %r&amp;quot; % fragment
swagger_spec_validator.common.SwaggerValidationError: Unresolvable JSON pointer: u&#39;definitions/ApiResponse&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;jenkins-wireup:dd97c70627f7af6687ab825eb13b9fdd&#34;&gt;Jenkins Wireup&lt;/h1&gt;

&lt;p&gt;Validation is great, but it will only reliably occur when fully automatic (developers are busy people!). Integration with Jenkins will ensure every Swagger Spec commit is valid, and prevent bad specs from getting into master.&lt;/p&gt;

&lt;p&gt;Simply add an &lt;code&gt;Execute Shell&lt;/code&gt; step and pass the above example (&lt;a href=&#34;https://gist.github.com/twistedpair/bc743b7e1a4b41753de6b148280410da&#34;&gt;gist link&lt;/a&gt;). The non-zero exit code on error will trigger an informative message to the offending developer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I prefer to have this as the first build step to &amp;ldquo;fail fast&amp;rdquo; on checkin, especially for long build processes, but you may prefer to do it last, so all build errors are reported.&lt;/p&gt;

&lt;p&gt;Example Jenkins Config Screen:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/swagger_validator_jenkins_config.png&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dd97c70627f7af6687ab825eb13b9fdd:1&#34;&gt;I had to wrangle an 11K spec file. Use &lt;a href=&#34;http://azimi.me/2015/07/16/split-swagger-into-smaller-files.html&#34;&gt;$ref includes&lt;/a&gt; if possible.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dd97c70627f7af6687ab825eb13b9fdd:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dd97c70627f7af6687ab825eb13b9fdd:2&#34;&gt;Running Swagger Editor locally is slow (e.g. 6min npm install/start), consider the &lt;a href=&#34;http://halyph.com/talks/2016-swagger-slides/Run%20Swagger%20Editor%20Locally.html&#34;&gt;prebuilt Docker image&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dd97c70627f7af6687ab825eb13b9fdd:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dd97c70627f7af6687ab825eb13b9fdd:3&#34;&gt;Aside from the &amp;ldquo;read the docs&amp;rdquo; link to the &lt;a href=&#34;https://swagger-spec-validator.readthedocs.io/en/latest/&#34;&gt;empty docs site&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dd97c70627f7af6687ab825eb13b9fdd:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>