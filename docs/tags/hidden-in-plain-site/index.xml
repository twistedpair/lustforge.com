<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hidden In Plain Site on lust.dev</title>
    <link>https://lust.dev/tags/hidden-in-plain-site/</link>
    <description>Recent content in Hidden In Plain Site on lust.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Joseph Lust</copyright>
    <lastBuildDate>Wed, 27 Feb 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lust.dev/tags/hidden-in-plain-site/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Download InfoQ Books and PDFs without Login</title>
      <link>https://lust.dev/2013/02/27/download-infoq-books-and-pdfs-without-login/</link>
      <pubDate>Wed, 27 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2013/02/27/download-infoq-books-and-pdfs-without-login/</guid>
      <description>

&lt;p&gt;I just read &lt;a href=&#34;http://www.infoq.com/minibooks/good-relationships-spring-data&#34;&gt;Good Relationships&lt;/a&gt; by Michael Hunger. It was a great read to get up to speed on Spring Data Neo4J quickly, and also the only reference out there.&lt;/p&gt;

&lt;p&gt;But, it requires you join InfoQ and give them your personal information to sell to whoever they please. No thanks.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/infoq_login.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well, let&amp;#8217;s look at those links, what do they really do? Pop open the inspector and look at the link. We see that it calls &lt;code&gt;loginAndDisplayDownloadLink()&lt;/code&gt;. Ok, so what is this function? Well, we can see it displays the content of &lt;code&gt;afterLogin&lt;/code&gt; once complete. So, what is in that element? Oh, I see, the download links!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/infoq_login_js.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A crappy website, right? Why manage sessions and login state when you can just have a form post away user information from the page and reveal what was always there? Understandably a lower overhead implementation, but not secure by any measure.&lt;/p&gt;

&lt;p&gt;So, to get the links, just run this on the page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.getElementById(â€˜afterLoginâ€™).style.display = â€˜blockâ€™
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use the download links, since the are in a publicly accessible page after all ðŸ˜‰&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;line-height: 13px;&#34;&gt;&lt;a href=&#34;http://www.infoq.com/resource/minibooks/good-relationships-spring-data/en/pdf/GoodRelationships-Neo4J-MichaelHunger.pdf&#34;&gt;PDF&lt;/a&gt;Â (128MB!) &amp;#8211; Update: this file appears to be the only secured file&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/resource/minibooks/good-relationships-spring-data/en/epub/Good-Relationships-Neo4j.epub&#34;&gt;ePub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/resource/minibooks/good-relationships-spring-data/en/mobi/9781105065569.mobi&#34;&gt;mobi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this is quite common since &lt;a href=&#34;http://www.lustforge.com/2011/07/02/windows-downloads-without-windows-genuine-advantage/&#34;&gt;MicroSoft Does it Too&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;update:1138b1eeb4561de51632ca8b8c55b9f5&#34;&gt;UPDATE:&lt;/h2&gt;

&lt;p&gt;The above links are now dead due to a rework of InfoQ. It was great while it lasted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows Downloads without Windows Genuine Advantage</title>
      <link>https://lust.dev/2011/07/02/windows-downloads-without-windows-genuine-advantage/</link>
      <pubDate>Sat, 02 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2011/07/02/windows-downloads-without-windows-genuine-advantage/</guid>
      <description>&lt;p&gt;I found myself needing to &lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=3702&#34;&gt;download Virtual PC&lt;/a&gt; from Microsoft recently to test an application. I have a bonafide copy of windows, but my enterprise anti-virus won&amp;#8217;t let me run WGA. No problem, we&amp;#8217;ll just snoop around the MS site.&lt;/p&gt;

&lt;p&gt;The following modal keeps prompting an ineffective download of WGA.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/wga_example.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;However, let&amp;#8217;s fire up Chrome and look at the html in the page.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/wga_example_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Hmm, check out the div &lt;strong&gt;GenuineCheck_Validated_Successful&lt;/strong&gt;. I bet there is a link in it. So let&amp;#8217;s check inside. Â Bingo!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;onclick=&amp;quot;OnGenuineCheck_ContinueDownloadVPC_Button_Clicked(); return false;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here we are, just run this javascript at the console for the page and the download will start right up, without WGA!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/wga_example_3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;OnGenuineCheck_ContinueDownloadVPC_Button_Clicked()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow, that was easy. Now, if MS had really cared to keep us out, they could have worked harder, but then we&amp;#8217;d have to work harder too to get around it. Thanks MS!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cracking WordPress Hashcash</title>
      <link>https://lust.dev/2010/07/17/cracking-wordpress-hashcash/</link>
      <pubDate>Sat, 17 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2010/07/17/cracking-wordpress-hashcash/</guid>
      <description>

&lt;p&gt;As many know, &lt;a href=&#34;https://wordpress.org/plugins/hashcash/&#34;&gt;WordPress Hashcash&lt;/a&gt; is not a &lt;a href=&#34;http://en.wikipedia.org/wiki/Hashcash&#34;&gt;hashcash&lt;/a&gt; at all. This is more than merely semantics. A true hashcash would provide protections to blogs from spam bots, but WPHC does no such thing. Rather WPHC merely projects an aura of protection that even the most novitiate script kiddie can crack.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&#34;http://wordpress-plugins.feifei.us/hashcash/&#34; target=&#34;_blank&#34;&gt;authors of WPHC&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;WP Hashcash is an antispam plugin that eradicates comment spam on WordPress blogs.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not really, let me explain why.&lt;/p&gt;

&lt;p&gt;WPHC inserts javascript into your blog&amp;#8217;s webpage. By default, a spam bot will not load and run this code because it is only run by web browsers. However, the spam bot makers are no Luddites and can easily pull this javascript code from the page, run it, and return the hashcash code.&lt;/p&gt;

&lt;p&gt;To prove this fact, see the below PHP class UnHashcash which takes the HTML of a blog post, processes the javascript, and returns the purportedly secure hashcash code.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/twistedpair/20b391f1e954e7a1aac9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I present this code as a clear example of why people should not assume that WPHC will protect their blogs from spam. The simplest solution is to require member sign up or use captchas and Akismet.&lt;/p&gt;

&lt;p&gt;Oh, and I know this blog is running WPHC. I&amp;#8217;m looking forward to some spam bots. Spam Ahoy!&lt;/p&gt;

&lt;h2 id=&#34;update-20-feb-2016:63bd52f0c6902ad4995f317a00b6a19d&#34;&gt;Update: 20 Feb 2016&lt;/h2&gt;

&lt;p&gt;Blog has moved to static Hugo, so sorry, no longer running WPHC.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>