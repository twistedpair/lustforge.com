<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on lust.dev</title>
    <link>https://lust.dev/tags/java/</link>
    <description>Recent content in Java on lust.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Joseph Lust</copyright>
    <lastBuildDate>Sat, 08 Feb 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lust.dev/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Donâ€™t call non-final methods from your constructor, please.</title>
      <link>https://lust.dev/2014/02/08/dont-call-non-final-methods-from-your-constructor-please/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2014/02/08/dont-call-non-final-methods-from-your-constructor-please/</guid>
      <description>&lt;p&gt;I ran into problems with someone doing this recently, so I&amp;#8217;ll have to embellish the web a little more. The world must learn.&lt;/p&gt;

&lt;p&gt;Why don&amp;#8217;t we call non-final methods from constructors? Because it&amp;#8217;s bad. Why is it bad? Because OO has an order to the madness and this ain&amp;#8217;t the order. Let&amp;#8217;s do a quick experiment to find out why.&lt;/p&gt;

&lt;p&gt;Here is our parent and child class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class FooKlassParent{

    static {
        log(&amp;quot;Parent: Init static block 1&amp;quot;);
    }

    public SysWriter w1 = new SysWriter(&amp;quot;Parent: non-static field init&amp;quot;);

    private static final SysWriter w2 = new SysWriter(
            &amp;quot;Parent: static field init&amp;quot;);

    public FooKlassParent() {
        super();
        log(&amp;quot;Parent: Constructor called&amp;quot;);
        doSomething();
    }

    static {
        log(&amp;quot;Parent: Init static block 2&amp;quot;);
    }

    public void doSomething() {
        log(&amp;quot;Parent: do something&amp;quot;);
    }

    protected static void log(final String msg) {
        log(msg);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So many goodies! Static blocks, static fields, non-static fields, non-static methods. Yum. If you&amp;#8217;re programming Java and don&amp;#8217;t know the order these all fire in, please switch to PHP.&lt;/p&gt;

&lt;p&gt;Now we&amp;#8217;ll extend with a child who is essentially the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class FooKlass extends FooKlassParent {

    static {
        log(&amp;quot;Child: Init static block 1&amp;quot;);
    }

    public SysWriter w1 = new SysWriter(&amp;quot;Child: non-static field init&amp;quot;);

    private static final SysWriter w2 = new SysWriter(
            &amp;quot;Child: static field init&amp;quot;);

    public FooKlass() {
        super();
        log(&amp;quot;Child: Constructor called&amp;quot;);
        doSomething();
    }

    static {
        log(&amp;quot;Child: Init static block 2&amp;quot;);
    }

    @Override
    public void doSomething() {
        // shame, you didn&#39;t call super.doSomething() first!
        log(&amp;quot;Child: do something&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, now everyone pick up your pencils and write what will be the output of making a new FooKlass.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Parent: Init static block 1
Parent: static field init
Parent: Init static block 2
Child: Init static block 1
Child: static field init
Child: Init static block 2
Parent: non-static field init
Parent: Constructor called
Child: do something
Child: non-static field init
Child: Constructor called
Child: do something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alright, so what did we learn? Things don&amp;#8217;t &amp;#8220;just happen&amp;#8221; &amp;#8211; Java operates by the JSR which is painfully specific here. The firing order is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Parent static blocks and fields in order of appearance&lt;/li&gt;
&lt;li&gt;Child static blocks and fields in order of appearance&lt;/li&gt;
&lt;li&gt;Parent non-static field initializers&lt;/li&gt;
&lt;li&gt;Parent constructor&lt;/li&gt;
&lt;li&gt;Child non-static field initializers&lt;/li&gt;
&lt;li&gt;Child constructor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Damn! That&amp;#8217;s mind blowing! The child&amp;#8217;s constructor calls &lt;strong&gt;super()&lt;/strong&gt; but super() was really called before the child&amp;#8217;s constructor. WYSI&lt;span style=&#34;text-decoration: underline;&#34;&gt;N&lt;/span&gt;WYG. The byte code ain&amp;#8217;t the code you wrote folks.&lt;/p&gt;

&lt;p&gt;Now, to conclude, why are non-final method invocations from the constructor bad? The child class&amp;#8217;s fields are not initialized yet. It&amp;#8217;s state is not yet prepared. Even though we see the parent&amp;#8217;s method, it&amp;#8217;s been overwritten with the child&amp;#8217;s byte code. &lt;strong&gt;Unholy things can happen now because your assumptions are no longer valid&lt;/strong&gt;. And worse, it&amp;#8217;s not just your assumptions, but someone might extend that lib/API class non-final public method. Mayhem will ensue, at 3AM, on Christmas Eve, when you&amp;#8217;re on the support rotation and as you rub your eyes and stare into the debugger it just ain&amp;#8217;t going to make sense to you.&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MyBatis Query Optimization : Dollar Sign be Damned</title>
      <link>https://lust.dev/2014/02/05/mybatis-query-optimization-dollar-sign-be-damned/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2014/02/05/mybatis-query-optimization-dollar-sign-be-damned/</guid>
      <description>&lt;p&gt;I discovered a shocking truth today. We use MyBatis on my current project for read only queries. Recently we had a cache populating job that ran rather slowly. We optimized and optimized cleaning up the queries and adjusting the database indexes and statistics tables. Try as we may, the job still required 30+ minutes each day.&lt;/p&gt;

&lt;p&gt;Miraculously the job dropped to 3 minutes yesterday. It must be broken! Check the logs! Alas, all of the outputs were correct. To the source control, what changed?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;... where id = ${id} ...
..octothorpe
 .where id = #{id} ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A dev had correctly fixed their query to use an &lt;a href=&#34;https://en.wiktionary.org/wiki/octothorpe&#34;&gt;octothorpe&lt;/a&gt; rather than dollar sign, since $ is an SQL inject inviting anti-pattern in MyBatis. However, $ also makes the query DML dynamic and as such MyBatis and subsequently &lt;strong&gt;Oracle never cached the query and the execution plans&lt;/strong&gt;, instead recalculating them each time.&lt;/p&gt;

&lt;p&gt;So, yet another reason to never use &lt;code&gt;$&lt;/code&gt; in MyBatis. I&amp;#8217;ve searched for a way to disable it in MyBatis, but haven&amp;#8217;t seen a flag yet. Shout out in the comments if you know a way. ðŸ˜Š&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mockito Fails to Inject Autowired Dependency</title>
      <link>https://lust.dev/2013/08/06/mockito-fails-to-inject-autowired-dependency/</link>
      <pubDate>Tue, 06 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2013/08/06/mockito-fails-to-inject-autowired-dependency/</guid>
      <description>&lt;p&gt;If you must test Spring beans and you&amp;#8217;ve used &lt;code&gt;@autowired&lt;/code&gt; in them, then &lt;strong&gt;you&amp;#8217;ll need to use Mockito&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EasyMock&lt;/strong&gt; is &lt;em&gt;easy&lt;/em&gt; for &lt;em&gt;easy things&lt;/em&gt;, but breaks down in this more complex situation. No worries, just let Mockito inject those DI dependencies for you. Ugh oh&amp;#8230; they are not injecting. But you&amp;#8217;ve read their docs and &lt;em&gt;they should inject!&lt;/em&gt; Sadness.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s set the stage. Enter our sample class stage left.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final SampleImpl {

    @autowired
    private Foo someFoo;

    private Bar someBar;

    public SampleImpl(final Bar someBar) {
        this.someBar=someBar;
    }

    public final void doSomething() {
        someFoo.doSomething();
        someBar.doSomthing();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a typical test for it, that will fail because &lt;code&gt;someFoo&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt; as it was never injected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class FooClassTest {

    @Mock
    private Foo mockFoo;

    @Mock
    private Bar mockBar;

    @InjectMocks
    private SampleImpl sampleImpl;

    @Before
    public void initMocks() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFooImpl() {
        // setup
        when(mockFoo.doSomething()).thenReturn(&amp;quot;foo works!&amp;quot;);
        when(mockBar.doSomething()).thenReturn(&amp;quot;bar works!&amp;quot;);

        // test
        sampleImpl.doSomething();

        // verify
        verify(mockFoo).doSomething();
        verify(mockBar).doSomething();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now change this line of the test and you&amp;#8217;re back in business.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @Before
    public void initMocks() {
        // must instantiate and then initiate since not using no arg constructor
        sampleImpl = new SampleImpl(mockBar);
        MockitoAnnotations.initMocks(this);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As far as I can tell, if you&amp;#8217;re not using a no-arg constructor, Mockito, which would normally instantiate the class to be injected with mocks, and then inject them, assumes you want constructor injection only and ignores the remaining &lt;code&gt;@autowired&lt;/code&gt; dependencies.&lt;/p&gt;

&lt;p&gt;Hope that helps someone. ðŸ˜‰&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Caused by: java.lang.ClassNotFoundException: org.apache.ibatis.mapping.DatabaseIdProvider</title>
      <link>https://lust.dev/2013/07/27/caused-by-java-lang-classnotfoundexception-org-apache-ibatis-mapping-databaseidprovider/</link>
      <pubDate>Sat, 27 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2013/07/27/caused-by-java-lang-classnotfoundexception-org-apache-ibatis-mapping-databaseidprovider/</guid>
      <description>&lt;p&gt;Perhaps you&amp;#8217;ve had this trace recently while trying to get myBatis working on Spring:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; Caused by: java.lang.ClassNotFoundException: org.apache.ibatis.mapping.DatabaseIdProvider
 at java.net.URLClassLoader$1.run(URLClassLoader.java:217)
 at java.security.AccessController.doPrivileged(Native Method)
 at java.net.URLClassLoader.findClass(URLClassLoader.java:205)
 at java.lang.ClassLoader.loadClass(ClassLoader.java:321)
 at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:294)
 at java.lang.ClassLoader.loadClass(ClassLoader.java:266)
 ... 57 more
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is the bane of open source. You can&amp;#8217;t always depend on quality releases. Don&amp;#8217;t worry, you followed the tutorial correctly. Let&amp;#8217;s take a look at the package&amp;#8217;s history in Maven Central.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lust.dev/img/ibatis_mapping_maven_central.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Maybe something is not quite right with &lt;code&gt;1.2.0&lt;/code&gt;? Let&amp;#8217;s try using &lt;strong&gt;1.1.1&lt;/strong&gt; instead.&lt;/p&gt;

&lt;p&gt;Bingo! That did it. Just stay away from &lt;code&gt;1.2.0&lt;/code&gt;. Hope that helped someone.&lt;/p&gt;

&lt;p&gt;But what else could we do to use the newer build? Just use the new dependency, which the project&amp;#8217;s site sadly has incorrectly listed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;3.2.2&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GWT JSNI Variables â€“ An Exhaustive List</title>
      <link>https://lust.dev/2012/11/11/gwt-jsni-variables-an-exhaustive-list/</link>
      <pubDate>Sun, 11 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2012/11/11/gwt-jsni-variables-an-exhaustive-list/</guid>
      <description>

&lt;p&gt;As anyone using the &lt;a href=&#34;https://developers.google.com/web-toolkit/doc/latest/DevGuideCodingBasicsJSNI&#34;&gt;Google Web Toolkit JSNI&lt;/a&gt; knows, there are certain reserved variables, or &amp;#8220;dollar words,&amp;#8221; exposed by the GWT runtime. While you may be familiar with &lt;code&gt;$wnd&lt;/code&gt; and &lt;code&gt;$doc&lt;/code&gt;, there are more undocumented words. See the exhaustive (as of GWT &lt;code&gt;2.5.0&lt;/code&gt;) list below taken from &lt;a href=&#34;http://code.google.com/p/google-web-toolkit/source/browse/trunk/dev/core/src/com/google/gwt/dev/js/ast/JsRootScope.java?r=9287&#34;&gt;source&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;wnd:12347b800901b14948e615972c727567&#34;&gt;$wnd&lt;/h3&gt;

&lt;p&gt;Reference to the root browser window GWT widgets are being rendered to. Note that when called from the iframe linker, GWT code runs in an iframe, not the root browser window, so calling window will reference the wrong window.&lt;/p&gt;

&lt;h3 id=&#34;doc:12347b800901b14948e615972c727567&#34;&gt;$doc&lt;/h3&gt;

&lt;p&gt;Same as above, but referencing the document, not window. Same as &lt;code&gt;$wnd.document&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;gwt-version:12347b800901b14948e615972c727567&#34;&gt;$gwt_version&lt;/h3&gt;

&lt;p&gt;The X.Y.Z version of GWT this code was compiled with. Because Google uses the GWT trunk in their apps, they will return &lt;code&gt;0.0.999&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;modulename:12347b800901b14948e615972c727567&#34;&gt;$moduleName&lt;/h3&gt;

&lt;p&gt;The name of the compiled GWT module. Note, you may have assumed this was obfuscated. Itâ€™s not.&lt;/p&gt;

&lt;h3 id=&#34;modulebase:12347b800901b14948e615972c727567&#34;&gt;$moduleBase&lt;/h3&gt;

&lt;p&gt;The root URL for this moduleâ€™s entrypoint.&lt;/p&gt;

&lt;h3 id=&#34;strongname:12347b800901b14948e615972c727567&#34;&gt;$strongName&lt;/h3&gt;

&lt;p&gt;The MD5 hash for this module.&lt;/p&gt;

&lt;h3 id=&#34;hosted:12347b800901b14948e615972c727567&#34;&gt;$hosted&lt;/h3&gt;

&lt;p&gt;Url and port of code server in hosted mode. i.e. &lt;code&gt;127.0.0.1:9997&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;hostedhtml-version:12347b800901b14948e615972c727567&#34;&gt;$hostedHtml Version&lt;/h3&gt;

&lt;p&gt;Version of hosted HTML page (hosted.html) in use. This is the page that shows error traces in browser in hosted mode.&lt;/p&gt;

&lt;h3 id=&#34;sessionid:12347b800901b14948e615972c727567&#34;&gt;$sessionId&lt;/h3&gt;

&lt;p&gt;Used when collecting stats in hosted mode. Same value as &lt;code&gt;window.__gwt_SessionID&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;stats:12347b800901b14948e615972c727567&#34;&gt;$stats()&lt;/h3&gt;

&lt;p&gt;Undocumented. Used to collect stats in hosted mode.&lt;/p&gt;

&lt;h3 id=&#34;entry:12347b800901b14948e615972c727567&#34;&gt;$entry()&lt;/h3&gt;

&lt;p&gt;Method that makes code reentry safe. This should wrap GWT code that will be called  from outside of GWT via Javascript calls you wish to expose from your GWT application. See docs for more.&lt;/p&gt;

&lt;h3 id=&#34;stack-stackdepth-location:12347b800901b14948e615972c727567&#34;&gt;$stack, $stackDepth, $location&lt;/h3&gt;

&lt;p&gt;Undocumented. Trace information used by JsStackEmulator.&lt;/p&gt;

&lt;h2 id=&#34;example-of-accessing-gwt-version:12347b800901b14948e615972c727567&#34;&gt;Example of accessing GWT Version&lt;/h2&gt;

&lt;p&gt;To determine the running version of a GWT application, you can use JSNI to return that version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// easily get the GWT version
public static native String getGwtVersion() /*-{
    return $gwt_version;
}-*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From outside the application you can walk the DOM of the page to find the iframe containing the running GWT code and access the version like below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var gwtVersion = null;
var frames = document.getElementsByTagName(&#39;iframe&#39;);
for (var i=0; i&amp;lt;frames.length; i++) {
    // prevent security access errors
    try {
        if(frames[i].contentWindow.$gwt_version) {
            gwtVersion = frames[i].contentWindow.$gwt_version;
            break;
        }
    }
    catch(e) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the mechanism I used to detect GWT apps in the &lt;a href=&#34;https://chrome.google.com/webstore/detail/library-detector/cgaocdmhkmfnkdkbnckgmpopcbpaaejo&#34;&gt;Library Detector Chrome Extension&lt;/a&gt; (&lt;a href=&#34;https://github.com/twistedpair/Library-Detector-for-Chrome&#34;&gt;Github&lt;/a&gt;). Note the wrapping in a &lt;code&gt;try/catch&lt;/code&gt;. This is because some iframes are cross domain and will throw aÂ securityÂ exception if you try to access them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Springâ€™s RememberMe and BadCredentialsException</title>
      <link>https://lust.dev/2012/10/17/springs-rememberme-and-badcredentialsexception/</link>
      <pubDate>Wed, 17 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2012/10/17/springs-rememberme-and-badcredentialsexception/</guid>
      <description>

&lt;p&gt;Spring is pretty swell, but the documentation is never what you need. It would be like reading an anatomy book about every organ in the body, but never being shown a picture of all of them together, and then trying to conduct a surgery.&lt;/p&gt;

&lt;p&gt;I was assembling Spring Security for a rewrite of &lt;a href=&#34;http://www.runpartner.com&#34;&gt;RunPartner.com&lt;/a&gt; and read the &lt;a title=&#34;Read more&#34; href=&#34;http://static.springsource.org/spring-security/site/docs/3.0.x/reference/remember-me.html&#34; target=&#34;_blank&#34;&gt;RememberMe chapter of Spring Security&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;http&amp;gt;
    ...
    &amp;lt;remember-me key=&amp;quot;myAppKey&amp;quot;/&amp;gt;
&amp;lt;/http&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I needed a database backed implementation, I liked the next example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;bean id=&amp;quot;rememberMeFilter&amp;quot; class=
 &amp;quot;org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;rememberMeServices&amp;quot; ref=&amp;quot;rememberMeServices&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;authenticationManager&amp;quot; ref=&amp;quot;theAuthenticationManager&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;rememberMeServices&amp;quot; class=
 &amp;quot;org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;userDetailsService&amp;quot; ref=&amp;quot;myUserDetailsService&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;key&amp;quot; value=&amp;quot;springRocks&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;rememberMeAuthenticationProvider&amp;quot; class=
 &amp;quot;org.springframework.security.authentication.rememberme.RememberMeAuthenticationProvider&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;key&amp;quot; value=&amp;quot;springRocks&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there is a lot of cruft there you don&amp;#8217;t need, and I wanted a different cookie TTL and cookie name. So I used the below, which &lt;em&gt;seemed&lt;/em&gt; to work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;http&amp;gt;
    ...
    &amp;lt;remember-me services-ref=&amp;quot;rememberMeServices&amp;quot;/&amp;gt;
&amp;lt;/http&amp;gt;
&amp;lt;!-- Handles auto login from remember me token --&amp;gt;
&amp;lt;beans:bean id=&amp;quot;rememberMeServices&amp;quot;
    class=&amp;quot;org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices&amp;quot;&amp;gt;
    &amp;lt;beans:property name=&amp;quot;userDetailsService&amp;quot; ref=&amp;quot;userService&amp;quot; /&amp;gt;
    &amp;lt;beans:property name=&amp;quot;key&amp;quot; value=&amp;quot;secretKey&amp;quot; /&amp;gt;
    &amp;lt;beans:property name=&amp;quot;cookieName&amp;quot; value=&amp;quot;customRememberName&amp;quot; /&amp;gt;
    &amp;lt;beans:property name=&amp;quot;tokenValiditySeconds&amp;quot; value=&amp;quot;604800&amp;quot; /&amp;gt;
&amp;lt;/beans:bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yet an enigma ensued. No stack traces would enlighten me, but when I tried deleting the &lt;code&gt;JSESSIONID&lt;/code&gt; to trigger auto login, I kept being returned to the login page. After setting many breakpoints, and walking through the spring code, I discovered that &lt;em&gt;there were two keys being set&lt;/em&gt; and the curious &lt;strong&gt;BadCredentialsException&lt;/strong&gt; exception being thrown and caught, silently. Shhh. A quick Google search and &lt;a href=&#34;http://forum.springsource.org/showthread.php?76606-might-Remember-Me-bug-for-rememver-user-and-concurrent-session/page2&#34; target=&#34;_blank&#34;&gt;forum post&lt;/a&gt; were not helpful.&lt;/p&gt;

&lt;p&gt;This is the trouble with &lt;strong&gt;automagical&lt;/strong&gt; areas of Spring. If they don&amp;#8217;t work out of the box, you&amp;#8217;d better be shovel ready to analyze some sources. The offending comparison takes place in the following method of &lt;em&gt;org.springframework.security.authentication.RememberMeAuthenticationProvider&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Authentication authenticate(Authentication authentication) throws AuthenticationException {
    if (!supports(authentication.getClass())) {
        return null;
    }

    if (this.key.hashCode() != ((RememberMeAuthenticationToken) authentication).getKeyHash()) {
        throw new BadCredentialsException(messages.getMessage(&amp;quot;RememberMeAuthenticationProvider.incorrectKey&amp;quot;,
                &amp;quot;The presented RememberMeAuthenticationToken does not contain the expected key&amp;quot;));
    }

    return authentication;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-fix:1cce388aa1c10d749c4e5bda1311af91&#34;&gt;The Fix&lt;/h1&gt;

&lt;p&gt;The Spring RememberMe docs don&amp;#8217;t tell you, but you must set the key in both the TokenBasedRememberMeServices bean and in the tag.&lt;/p&gt;

&lt;p&gt;Make sure you define the same key in both places. Update the first tag to be as below to work with my code segment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;http&amp;gt;
    ...
    &amp;lt;remember-me services-ref=&amp;quot;rememberMeServices&amp;quot; key=&amp;quot;secretKey&amp;quot;/&amp;gt;
&amp;lt;/http&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was easy, but not as easy as a complete, realistic, production RememberMe example on the Spring docs would have been. ðŸ˜Š&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparing BigDecimals with Round and SetScale</title>
      <link>https://lust.dev/2011/07/14/comparing-bigdecimals-with-round-and-setscale/</link>
      <pubDate>Thu, 14 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://lust.dev/2011/07/14/comparing-bigdecimals-with-round-and-setscale/</guid>
      <description>&lt;p&gt;In Java financial programming, you need the precision &lt;a href=&#34;http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html&#34; title=&#34;JavaDoc&#34;&gt;BigDecimals&lt;/a&gt; afford. However, due to the great precision of this value, comparisons are very error prone. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;0.000000000000000000000000000000001 != 0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For most cases, we want to round when theÂ calculationsÂ are complete to the desired precision, rather than during intermediate steps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DON&amp;rsquo;T USE &lt;a href=&#34;http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#round(java.math.MathContext)&#34;&gt;round()&lt;/a&gt;&lt;/strong&gt; as it sets the number of significant digits, not the number of decimals. It will lead to odd behavior if you do, as shown below. Note that&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// unexpected round() method behavior - don&#39;t use it
MathContext myContext = new MathContext( 2, RoundingMode.HALF_UP);
System.out.println( new BigDecimal( &amp;quot;4.55&amp;quot; ).round( myContext ).toString() ); // 4.6
System.out.println( new BigDecimal( &amp;quot;4.5&amp;quot; ).round( myContext ).toString() ); // 4.5
System.out.println( new BigDecimal( &amp;quot;45.983&amp;quot; ).round( myContext ).toString() ); // 45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, use &lt;strong&gt;&lt;a href=&#34;http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#setScale(int,%20int)&#34;&gt;setScale()&lt;/a&gt;&lt;/strong&gt;, which sets just the number of decimal places as shown below. Imagine your own values forÂ &lt;span class=&#34;Apple-style-span&#34; style=&#34;font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px; white-space: pre;&#34;&gt;someBD(1-4).&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// constant
int myNumDecimals = 2;

// do some math
BigDecimal myValA = someBD1.multiply(someBD2)
BigDecimal myValB = someBD3.divide( someBD4);

// round to desired number decimal places
myValA.setScale( myNumDecimals, RoundingMode.HALF_UP);
myValB.setScale( myNumDecimals, RoundingMode.HALF_UP);

// compare - has three int returns: [-1,0,1] -&amp;gt; [&amp;lt;,==,&amp;gt;]
if( myValA.compareTo(myValB) == 0 ) {
 System.out.println(&amp;quot;They match!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, more succinctly&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// constant
int myNumDecimals = 2;

// do some math, round to desired number decimal places
BigDecimal myValA = someBD1.multiply(someBD2).setScale( myNumDecimals, RoundingMode.HALF_UP);
BigDecimal myValB = someBD3.divide( someBD4).setScale( myNumDecimals, RoundingMode.HALF_UP);

// compare - has three int returns: [-1,0,1] -&amp;gt; [&amp;lt;,==,&amp;gt;]
if( myValA.compareTo(myValB) == 0 ) {
 System.out.println(&amp;quot;They match!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>