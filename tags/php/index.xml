<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PHP on lust.dev</title><link>https://lust.dev/tags/php/</link><description>Recent content in PHP on lust.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Joe Lust</copyright><lastBuildDate>Sat, 08 Oct 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://lust.dev/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Password Hasher : Every Hash Under the Sun</title><link>https://lust.dev/2011/10/08/password-hasher-every-hash-under-the-sun/</link><pubDate>Sat, 08 Oct 2011 00:00:00 +0000</pubDate><guid>https://lust.dev/2011/10/08/password-hasher-every-hash-under-the-sun/</guid><description>Big helping of hash I got tired of having to find a place to run all my hashes frequently for random projects, so I through this together in a few lines. I hope it helps folks.
The following hashes are provided: md2, md4, md5, sha1, sha224, sha256, sha384, sha512, ripemd128, ripemd160, ripemd256, ripemd320, whirlpool, tiger128,3, tiger160,3, tiger192,3, tiger128,4, tiger160,4, tiger192,4, snefru, snefru256, gost, adler32, crc32, crc32b, salsa10, salsa20, haval128,3, haval160,3, haval192,3, haval224,3, haval256,3, haval128,4, haval160,4, haval192,4, haval224,4, haval256,4, haval128,5, haval160,5, haval192,5, haval224,5, haval256,5.</description></item><item><title>Convert MySQL Dump to Routines Files [PHP script]</title><link>https://lust.dev/2010/11/06/convert-mysql-dump-to-routines-php-script/</link><pubDate>Sat, 06 Nov 2010 00:00:00 +0000</pubDate><guid>https://lust.dev/2010/11/06/convert-mysql-dump-to-routines-php-script/</guid><description>Perhaps you are like me and… well… didn&amp;rsquo;t get righteous about backuping up your MySQL routines to an SCM until your first database scare?
If you did, you’d wish you could just take that database export script from PHPMyAdmin and parse / convert it to a bunch of tidy little Procedure, Function, and Trigger files. Why, that would be nice!
The following PHP script (PHP 5+) will do the following:</description></item><item><title>Unittesting with PhpDesigner and SimpleTest</title><link>https://lust.dev/2010/11/01/unittesting-with-phpdesigner/</link><pubDate>Mon, 01 Nov 2010 00:00:00 +0000</pubDate><guid>https://lust.dev/2010/11/01/unittesting-with-phpdesigner/</guid><description>Here is how to unitest within PhpDesigner. The following was done on a Windows 7 machine with PhpDesigner 7.2.
Install WAMP server on your Windows machine. This is needed because the default PhpDesigner PHP engine cannot connect to databases (i.e. MySQL). Just use the default installer setup and location We’ll assume your WAMP is installed in c:\wamp Now point your PhpDesigner at the WAMP. PhpDesigner &amp;gt; Tools &amp;gt; Preferences… Set the Debugger to use the PHP Interpreter your c:\wamp\bin\php\php5.</description></item><item><title>Cracking WordPress Hashcash</title><link>https://lust.dev/2010/07/17/cracking-wordpress-hashcash/</link><pubDate>Sat, 17 Jul 2010 00:00:00 +0000</pubDate><guid>https://lust.dev/2010/07/17/cracking-wordpress-hashcash/</guid><description>As many know, WordPress Hashcash is not a hashcash at all. This is more than merely semantics. A true hashcash would provide protections to blogs from spam bots, but WPHC does no such thing. Rather WPHC merely projects an aura of protection that even the most novitiate script kiddie can crack.
According to the authors of WPHC:
WP Hashcash is an antispam plugin that eradicates comment spam on WordPress blogs.</description></item></channel></rss>