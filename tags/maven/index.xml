<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Maven on lust.dev</title><link>https://lust.dev/tags/maven/</link><description>Recent content in Maven on lust.dev</description><generator>Hugo</generator><language>en-us</language><copyright>Joe Lust</copyright><lastBuildDate>Tue, 03 Jul 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://lust.dev/tags/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>GWT war file Size Reduction – a.k.a GWT Weightloss</title><link>https://lust.dev/2012/07/03/gwt-war-file-size-reduction-a-k-a-gwt-weightloss/</link><pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate><guid>https://lust.dev/2012/07/03/gwt-war-file-size-reduction-a-k-a-gwt-weightloss/</guid><description>&lt;p>GWT is great, but the size and number of files compiled can slowly creep upward. In a large project, this can mean your &lt;code>war&lt;/code> file contains thousands of unneeded files. On environments like AppEngine, where the size of your war is limited, this introduces an upper bound on the application size.&lt;/p>
&lt;p>Don’t worry, you can easily slim that war down.&lt;/p>
&lt;h3 id="the-stowaways">The Stowaways&lt;/h3>
&lt;ul>
&lt;li>&lt;code>.gwt-tmp/&lt;/code> - used in the compile process, we don’t need them anymore&lt;/li>
&lt;li>&lt;code>_.junit_symbolMaps/&lt;/code> - used by junit, not needed in production&lt;/li>
&lt;li>&lt;code>WEB-INF/classes/com/yourPkg/&lt;/code> - compiled java classes, but client runs JS&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;h3 id="maven-to-the-rescue">Maven to the rescue&lt;/h3>
&lt;p>The following line used when packaging your war using the &lt;strong>maven-antrun-plugin&lt;/strong> does the trick, or you can just do it by hand or your scripting framework of choice.&lt;/p></description></item><item><title>GWT Maps API v3 and Maven</title><link>https://lust.dev/2012/01/29/gwt-maps-api-v3-and-maven/</link><pubDate>Sun, 29 Jan 2012 00:00:00 +0000</pubDate><guid>https://lust.dev/2012/01/29/gwt-maps-api-v3-and-maven/</guid><description>&lt;h3 id="deprecated">Deprecated&lt;/h3>
&lt;p>This post was for building the pre-alpha version of the&lt;a href="https://github.com/branflake2267/GWT-Maps-V3-Api">GWT-Maps-V3-API&lt;/a>. However, it’s now fully Mavenized and hosted on &lt;a href="https://github.com/branflake2267/GWT-Maps-V3-Api">GitHib&lt;/a>. Please check it out from there and simply build it.&lt;/p>
&lt;h3 id="original-post">Original Post&lt;/h3>
&lt;p>I’ve been a great fan of &lt;a href="https://plus.google.com/u/1/111739836936169749229/posts">Brandon Donnelson’s&lt;/a> ongoing &lt;a href="http://code.google.com/p/gwt-maps-api/">gwt-maps-api&lt;/a> project. However, I also love the simplicity Maven brings to my projects and life as a whole. The following is how to build the &lt;em>gwt-maps-api&lt;/em> project using Maven (m2e) and Eclipse (Indigo). Note that since the project is still prebeta, the below are subject to change. Post a comment if you have an issue or suggestion.&lt;/p></description></item></channel></rss>