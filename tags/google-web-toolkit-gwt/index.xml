<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Google Web Toolkit (GWT) on lust.dev</title><link>https://lust.dev/tags/google-web-toolkit-gwt/</link><description>Recent content in Google Web Toolkit (GWT) on lust.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Joe Lust</copyright><lastBuildDate>Tue, 26 Aug 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://lust.dev/tags/google-web-toolkit-gwt/index.xml" rel="self" type="application/rss+xml"/><item><title>Accessing the GWT History Stack</title><link>https://lust.dev/2014/08/26/accessing-the-gwt-history-stack/</link><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>https://lust.dev/2014/08/26/accessing-the-gwt-history-stack/</guid><description>GWT (Google Web Toolkit) does not supply a direct way to know where users have been within your application. However, you can use a simple listener and stack to record and access history events.
The key is the GWT History object. You can listen to its change event to know the user has gone to another Place. The restriction is we don’t know when the user has gone back. This is an inherent state detection problem in the stateless HTTP web.</description></item><item><title>Restoring the Chrome GWT DevMode Plugin</title><link>https://lust.dev/2014/06/12/restoring-the-chrome-gwt-devmode-plugin/</link><pubDate>Thu, 12 Jun 2014 00:00:00 +0000</pubDate><guid>https://lust.dev/2014/06/12/restoring-the-chrome-gwt-devmode-plugin/</guid><description>Did your DevMode Chrome extension stop working recently? Welcome to the party. The powers of divine wisdom on the Google Chrome team decided that NPAPI was a superannuated security hole and must die. The fact that they proposed no clear alternative solution has led many a plugin (Java, GWT DevMode, Linux Garmin Connect, VDPAU, GNOME Shell Integration, VMware VSphere Client, Nemid) to wither and die. But what about Flash!? Well, to keep important plugins from being impacted, they’ve been whitelisted, but for the rest of us who depend on the Chrome DevMode Plugin… too bad.</description></item><item><title>GWT SuperDevMode Compile Button Missing</title><link>https://lust.dev/2013/07/26/gwt-superdevmode-compile-button-missing/</link><pubDate>Fri, 26 Jul 2013 00:00:00 +0000</pubDate><guid>https://lust.dev/2013/07/26/gwt-superdevmode-compile-button-missing/</guid><description>So you are trying out SuperDevMode on your GWT project, but you’re getting the bookmarklet popup without a compile button? Boo.
If you’re like me, can’t sleep and decided to attempt SuperDevMode at 5:10AM, then you might not have read the official documentation that well. Luckily there is a more detailed write up that will admonish your insomnia addled pate. You see, you’ve almost made it, but forgotten to enable SupperDevMode in your project’s module.</description></item><item><title>GWT JSNI Variables – An Exhaustive List</title><link>https://lust.dev/2012/11/11/gwt-jsni-variables-an-exhaustive-list/</link><pubDate>Sun, 11 Nov 2012 00:00:00 +0000</pubDate><guid>https://lust.dev/2012/11/11/gwt-jsni-variables-an-exhaustive-list/</guid><description>As anyone using the Google Web Toolkit JSNI knows, there are certain reserved variables, or “dollar words,” exposed by the GWT runtime. While you may be familiar with $wnd and $doc, there are more undocumented words. See the exhaustive (as of GWT 2.5.0) list below taken from source.
$wnd Reference to the root browser window GWT widgets are being rendered to. Note that when called from the iframe linker, GWT code runs in an iframe, not the root browser window, so calling window will reference the wrong window.</description></item><item><title>GWT war file Size Reduction – a.k.a GWT Weightloss</title><link>https://lust.dev/2012/07/03/gwt-war-file-size-reduction-a-k-a-gwt-weightloss/</link><pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate><guid>https://lust.dev/2012/07/03/gwt-war-file-size-reduction-a-k-a-gwt-weightloss/</guid><description>GWT is great, but the size and number of files compiled can slowly creep upward. In a large project, this can mean your war file contains thousands of unneeded files. On environments like AppEngine, where the size of your war is limited, this introduces an upper bound on the application size.
Don’t worry, you can easily slim that war down.
The Stowaways .gwt-tmp/ - used in the compile process, we don’t need them anymore _.</description></item><item><title>“Add a Browser” – GWT Eclipse Plugin</title><link>https://lust.dev/2012/06/02/add-a-browser-gwt-eclipse-plugin/</link><pubDate>Sat, 02 Jun 2012 00:00:00 +0000</pubDate><guid>https://lust.dev/2012/06/02/add-a-browser-gwt-eclipse-plugin/</guid><description>Ever get annoyed that you need to “Add a Browser” to the GWT Eclipse Plugin’s launch panel every use to launch Google Chrome or Mozilla Firefox? I think I’ve done this about a hundred times over the last year, so I figured out how to fix it and now this answer will be on Google to help everyone else.
The Problem You close Eclipse and those browsers you added have been forgotten the next time you want to run a GWT Web Application.</description></item><item><title>GWT Maps API v3 and Maven</title><link>https://lust.dev/2012/01/29/gwt-maps-api-v3-and-maven/</link><pubDate>Sun, 29 Jan 2012 00:00:00 +0000</pubDate><guid>https://lust.dev/2012/01/29/gwt-maps-api-v3-and-maven/</guid><description>Deprecated This post was for building the pre-alpha version of theGWT-Maps-V3-API. However, it’s now fully Mavenized and hosted on GitHib. Please check it out from there and simply build it.
Original Post I’ve been a great fan of Brandon Donnelson’s ongoing gwt-maps-api project. However, I also love the simplicity Maven brings to my projects and life as a whole. The following is how to build the gwt-maps-api project using Maven (m2e) and Eclipse (Indigo).</description></item><item><title>GWT Module’s Missing DTD Tag</title><link>https://lust.dev/2012/01/29/gwt-modules-missing-dtd-tag/</link><pubDate>Sun, 29 Jan 2012 00:00:00 +0000</pubDate><guid>https://lust.dev/2012/01/29/gwt-modules-missing-dtd-tag/</guid><description>GWT Module AutoSuggestion Magic DTD’s are great. They let IDE’s like Eclipse know what is and is not valid XML. And, when you’re unsure or inquisitive, you can just ALT+ENTER and learn every available tag. That is amazing. Alas, it seems that Google and GWT continue to ignore this standard.
However, you can add these tags yourself and get the IDE auto-validation auto-suggestion features. Just change the top of your module.</description></item></channel></rss>